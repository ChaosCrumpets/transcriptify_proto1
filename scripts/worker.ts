/**
 * Local worker: polls `transcription_reports` for PENDING rows and runs a
 * minimal `processJob` replacement. This is intended for local development only.
 *
 * Run with: `npx ts-node scripts/worker.ts` (install ts-node if needed)
 */
import { db } from '../lib/supabase';

async function processJobLocal(reportId: string) {
  console.log(`[worker] Processing job ${reportId}`);

  // Mark as processing
  await db.from('transcription_reports').update({ status: 'PROCESSING' }).eq('id', reportId);

  // Simulate work (replace with real integration)
  await new Promise((r) => setTimeout(r, 5000));

  // Write mock results
  await db
    .from('transcription_reports')
    .update({
      status: 'COMPLETED',
      synopsis: 'Local worker: mock synopsis',
      key_takeaways: ['Mock takeaway 1', 'Mock takeaway 2'],
      cleaned_transcript: 'This is a mock cleaned transcript generated by the local worker.',
      original_transcript: 'um mock original transcript',
    })
    .eq('id', reportId);

  console.log(`[worker] Completed job ${reportId}`);
}

async function pollPending() {
  console.log('[worker] Polling for PENDING jobs...');
  const { data, error } = await db.from('transcription_reports').select('id').eq('status', 'PENDING');
  if (error) {
    console.error('[worker] Failed to fetch pending jobs:', error);
    return;
  }

  if (!data || data.length === 0) {
    // nothing to do
    return;
  }

  for (const row of data) {
    try {
      if (row.id) await processJobLocal(row.id as string);
    } catch (err) {
      console.error(`[worker] Error processing ${row.id}:`, err);
      // Mark as failed
      await db.from('transcription_reports').update({ status: 'FAILED', error_message: String(err) }).eq('id', row.id);
    }
  }
}

async function main() {
  console.log('[worker] Starting local worker (poll every 5s)');
  while (true) {
    try {
      await pollPending();
    } catch (err) {
      console.error('[worker] Unexpected error:', err);
    }
    await new Promise((r) => setTimeout(r, 5000));
  }
}

main().catch((err) => {
  console.error('[worker] Fatal error:', err);
  process.exit(1);
});
